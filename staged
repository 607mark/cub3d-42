diff --git a/inc/cub3d.h b/inc/cub3d.h
index 7cbd3ad..42c8f4f 100644
--- a/inc/cub3d.h
+++ b/inc/cub3d.h
@@ -23,8 +23,6 @@
 # include <limits.h>
 # include <stdlib.h>
 
-# define WIDTH 1000
-# define HEIGHT 500
 # define PI 3.14159265358979323846264338327950288
 
 typedef struct s_rgb
@@ -34,6 +32,15 @@ typedef struct s_rgb
 	int		b;
 }	t_rgb;
 
+typedef struct s_draw {
+    int x_start;
+    int y_start;
+    int x_end;
+    int y_end;
+    int x_draw;
+    int y_draw;
+} t_draw;
+
 typedef struct s_player
 {
     double x_pos;
@@ -65,6 +72,12 @@ typedef struct s_raycast
 	char dir;
 	char texture_type;
 	int wall_height;
+	double x_hit;
+    double y_hit;
+    double tex_x_point;   
+    double tex_y_point;
+	double tex_x_pix;   
+    double tex_y_pix;
 } t_raycast;
 
 
@@ -114,22 +127,22 @@ typedef struct	s_game
 
 
 /*DDA*/
-void calc_ray_dir(t_raycast *r, int i, t_game* game);
-void calc_delt_dist(t_raycast *r, int i, t_game* game);
-void get_step_dir(t_raycast *r, int i, t_game* game);
-void dda(t_raycast *r, t_game* game);
-void calc_perpendicular_dist(t_raycast *r);
+void 			calc_ray_dir(t_raycast *r, int i, t_game* game);
+void 			calc_delt_dist(t_raycast *r, int i, t_game* game);
+void 			get_step_dir(t_raycast *r, int i, t_game* game);
+void 			dda(t_raycast *r, t_game* game);
+void 			calc_perpendicular_dist(t_raycast *r);
 
 /*Player's movement*/
-void key_hook(mlx_key_data_t keydata, void* param);
-void player_hook(void* param);
-void rotate(t_game* game, double rot_rad);
-int is_valid_pos(t_game* game, double new_x, double new_y);
+void 			key_hook(mlx_key_data_t keydata, void* param);
+void 			player_hook(void* param);
+void 			rotate(t_game* game, double rot_rad);
+int 			is_valid_pos(t_game* game, double new_x, double new_y);
 
 /* Minimap*/
-void draw_square(t_game *game, int x, int y, int size, uint32_t color);
-void draw_map(t_game* game);
-void draw_player(t_game *game, int x, int y, int size, uint32_t color);
+void 			draw_square(t_game *game, int x, int y, int size, uint32_t color);
+void 			draw_map(t_game* game);
+void 			draw_player(t_game *game, int x, int y, int size, uint32_t color);
 
 /* Rendering*/
 int 			render(t_game *game);
@@ -138,7 +151,7 @@ void			calculate_wall_position(t_game *game, t_raycast *raycast, int *draw_start
 void			draw_wall_strip(t_game *game, int x, int draw_start, int draw_end, t_raycast *r);
 void			draw_floor(t_game *game, int x, int *draw_end);
 void			draw_ceiling(t_game *game, int x, int *draw_start);
-uint32_t get_color(t_game * game, t_raycast *r, int total_y, int draw_start);
+uint32_t		get_color(t_game * game, t_raycast *r, int total_y, int draw_start);
 
 /*Errors*/
 void			error_exit(char *msg, t_game *game);
diff --git a/src/graphics/drawing.c b/src/graphics/drawing.c
index 372ae75..7442cb0 100644
--- a/src/graphics/drawing.c
+++ b/src/graphics/drawing.c
@@ -30,10 +30,6 @@ void	calculate_wall_position(t_game *game, t_raycast *raycast, int *draw_start,
 	
 	*draw_start = (game->height / 2) - (raycast->wall_height / 2);
 	*draw_end = (game->height / 2) + (raycast->wall_height / 2);
-	// printf("draw_start: %d\n", *draw_start);
-	// printf("draw_end: %d\n", *draw_end);
-	// if (*draw_start < 0)
-	// 	*draw_start = 0;
 	if (*draw_end > game->height)
 		*draw_end = game->height;
 }
diff --git a/src/graphics/get_color.c b/src/graphics/get_color.c
index 9d3c595..49d0e9a 100644
--- a/src/graphics/get_color.c
+++ b/src/graphics/get_color.c
@@ -2,9 +2,13 @@
 
 uint32_t get_texture_pixel_color(mlx_texture_t* texture, uint32_t x, uint32_t y)
 {
-    uint32_t shift = (y * texture->width + x) * texture->bytes_per_pixel;
-    uint8_t* pixel = texture->pixels + shift;
-    uint32_t color = (pixel[0] << 24 | pixel[1] << 16 | (pixel[2] << 8) | pixel[3]);
+    uint32_t shift;
+    uint8_t* pixel;
+    uint32_t color;
+    
+    shift = (y * texture->width + x) * texture->bytes_per_pixel;
+    pixel = texture->pixels + shift;
+    color = (pixel[0] << 24 | pixel[1] << 16 | (pixel[2] << 8) | pixel[3]);
     return color;
 }
 
@@ -20,48 +24,54 @@ void define_side(t_raycast *r)
         r->texture_type = 'E';
 }
 
-uint32_t get_color(t_game * game, t_raycast *r, int total_y, int draw_start)
+void calc_texture_points(t_game *game, t_raycast *r, int total_y, int draw_start)
 {
-    double hit_x, hit_y;
-    
-    hit_x = fabs(game->player.x_pos + r->x_raydir * r->perp_dist);
-    hit_y = fabs(game->player.y_pos + r->y_raydir * r->perp_dist);
-
-    define_side(r);
-    double tex_x_point;   
-    double tex_y_point; 
-
+    r->x_hit = fabs(game->player.x_pos + r->x_raydir * r->perp_dist);
+    r->y_hit = fabs(game->player.y_pos + r->y_raydir * r->perp_dist);
     if (r->side)
-        tex_x_point = hit_x - (int)hit_x;
+        r->tex_x_point = r->x_hit - (int)r->x_hit;
     else
-        tex_x_point = hit_y - (int)hit_y;
+        r->tex_x_point = r->y_hit - (int)r->y_hit;
 
     if (r->texture_type == 'S' || r->texture_type == 'W')
-        tex_x_point = 1 - tex_x_point;
-    tex_y_point = (double)(total_y - draw_start) / (double)r->wall_height;
+        r->tex_x_point = 1 - r->tex_x_point;
+    r->tex_y_point = (double)(total_y - draw_start) / (double)r->wall_height;
+}
+
+void calc_tex_pix_coords(t_game * game, t_raycast *r)
+{
     if (r->texture_type == 'N')
     {
-        int x = game->textures.tex_north->width * tex_x_point;
-        int y = game->textures.tex_north->height * tex_y_point;
-        return (get_texture_pixel_color(game->textures.tex_north, x, y));
+        r->tex_x_pix= game->textures.tex_north->width * r->tex_x_point;
+        r->tex_y_pix = game->textures.tex_north->height * r->tex_y_point;
     }
-    if (r->texture_type == 'S')
+    else if (r->texture_type == 'S')
     {
-        int x = game->textures.tex_south->width * tex_x_point;
-        int y = game->textures.tex_south->height * tex_y_point;
-        return (get_texture_pixel_color(game->textures.tex_south, x, y));
+        r->tex_x_pix= game->textures.tex_south->width * r->tex_x_point;
+        r->tex_y_pix = game->textures.tex_south->height * r->tex_y_point;
     }
-    if (r->texture_type == 'W')
+    else if (r->texture_type == 'W')
     {
-        int x = game->textures.tex_west->width * tex_x_point;
-        int y = game->textures.tex_west->height * tex_y_point;
-        return (get_texture_pixel_color(game->textures.tex_west, x, y));
+        r->tex_x_pix= game->textures.tex_west->width * r->tex_x_point;
+        r->tex_y_pix = game->textures.tex_west->height * r->tex_y_point;
     }
     else
     {
-        int x = game->textures.tex_east->width * tex_x_point;
-        int y = game->textures.tex_east->height * tex_y_point;
-        return (get_texture_pixel_color(game->textures.tex_east, x, y));
+        r->tex_x_pix= game->textures.tex_east->width * r->tex_x_point;
+        r->tex_y_pix = game->textures.tex_east->height * r->tex_y_point;
     }
-    
+}
+uint32_t get_color(t_game * game, t_raycast *r, int total_y, int draw_start)
+{
+    define_side(r);
+    calc_texture_points(game, r, total_y, draw_start);
+    calc_tex_pix_coords(game, r);
+    if (r->texture_type == 'N')
+        return (get_texture_pixel_color(game->textures.tex_north, r->tex_x_pix, r->tex_y_pix));
+    else if (r->texture_type == 'S')
+        return (get_texture_pixel_color(game->textures.tex_south, r->tex_x_pix, r->tex_y_pix));
+    else if (r->texture_type == 'W')
+        return (get_texture_pixel_color(game->textures.tex_west, r->tex_x_pix, r->tex_y_pix));
+    else
+        return (get_texture_pixel_color(game->textures.tex_east, r->tex_x_pix, r->tex_y_pix));
 }
\ No newline at end of file
diff --git a/src/graphics/minimap.c b/src/graphics/minimap.c
index 63f48ab..d3a9bd0 100644
--- a/src/graphics/minimap.c
+++ b/src/graphics/minimap.c
@@ -2,56 +2,64 @@
 
 void draw_player(t_game *game, int x, int y, int size, uint32_t color)
 {
-    int start_x = x;
-    int start_y = y;
-    int end_x = x + size - 1;
-    int end_y = y + size - 1;
-    int draw_y = start_y;
-    while (draw_y <= end_y)
+    t_draw d;
+    d.x_start = game->map_offset_x + x;
+    d.y_start =  game->map_offset_y + y;
+    d.x_end =  game->map_offset_x + x + size;
+    d.y_end = game->map_offset_y + y + size;
+    d.y_draw = d.y_start;
+    while (d.y_draw <= d.y_end)
     {
-        int draw_x = start_x;
-        while (draw_x <= end_x)
+        d.x_draw = d.x_start;
+        while (d.x_draw <= d.x_end)
         {
-                mlx_put_pixel(game->textures.vigne, draw_x, draw_y, color);
-            draw_x++;
+                mlx_put_pixel(game->textures.vigne, d.x_draw, d.y_draw, color);
+            d.x_draw++;
         }
-        draw_y++;
+        d.y_draw++;
     }
 }
-void draw_square(t_game *game, int x, int y, int size, uint32_t color)
+void shadow(t_game *game, int x, int y, int size, uint32_t color)
 {
-    int start_x = x;
-    int start_y = y;
-    int end_x = x + size - 1;
-    int end_y = y + size - 1;
-    int draw_y = start_y;
-    while (draw_y <= end_y)
+    t_draw d;
+    d.x_start = game->map_offset_x + x;
+    d.y_start = game->map_offset_y + y + size;
+    d.x_end = d.x_start + size;
+    d.y_end = d.y_start + size / 3;
+    d.y_draw = d.y_start;
+    
+    while (d.y_draw <= d.y_end)
     {
-        int draw_x = start_x;
-        while (draw_x <= end_x)
+        d.x_draw = d.x_start;
+        while (d.x_draw <= d.x_end + 1)
         {
-                mlx_put_pixel(game->textures.vigne, draw_x, draw_y, color);
-            draw_x++;
+            mlx_put_pixel(game->textures.vigne, d.x_draw, d.y_draw, 0x470D00FF);
+            d.x_draw++;
         }
-        draw_y++;
+        d.y_draw++;
     }
-    start_x = x;
-    start_y = end_y + 1;
-    end_x = start_x + size -1;
-    end_y = start_y + size / 3;
-    draw_y = start_y;
-    while (draw_y <= end_y)
+}
+void draw_square(t_game *game, int x, int y, int size, uint32_t color)
+{
+    t_draw d;
+    
+    d.x_start = game->map_offset_x + x;
+    d.y_start = game->map_offset_y + y;
+    d.x_end = game->map_offset_x + x + size;
+    d.y_end = game->map_offset_y + y + size;
+    d.y_draw = d.y_start;
+    while (d.y_draw <= d.y_end)
     {
-        int draw_x = start_x;
-        while (draw_x <= end_x)
-        {
-            mlx_put_pixel(game->textures.vigne, draw_x, draw_y, 0x470D00FF);
-            draw_x++;
-        }
-        draw_y++;
+        d.x_draw = d.x_start - 1;
+        while (d.x_draw++ <= d.x_end)
+            mlx_put_pixel(game->textures.vigne, d.x_draw, d.y_draw, color);
+        d.y_draw++;
     }
+    shadow(game, x, y, size, color);
 }
 
+
+
 void draw_background(t_game *game)
 {
     int i, j;
@@ -62,7 +70,7 @@ void draw_background(t_game *game)
         while(j < game->map_height)
         {
             if (game->map[j][i] == '#' || game->map[j][i] == '0')
-                draw_square(game, game->map_offset_x + i * game->scale, game->map_offset_y + j * game->scale, game->scale, 0xD6C0AB9F);
+                draw_square(game, i * game->scale, j * game->scale, game->scale, 0xD6C0AB9F);
             j++;
         }
         i++;
@@ -79,9 +87,11 @@ void draw_map(t_game* game)
         while(j < game->map_height)
         {
             if (game->map[j][i] == '1')
-                draw_square(game, game->map_offset_x + i * game->scale, game->map_offset_y + j * game->scale, game->scale, 0x660F07FF);
+                draw_square(game, i * game->scale, j * game->scale, game->scale, 0x660F07FF);
             j++;
         }
         i++;
     }
+    draw_player(game, game->player.x_pos *game->scale - 6, game->player.y_pos * game->scale - 6, 12, 0x000000FF);
+    draw_player(game, game->player.x_pos *game->scale - 4, game->player.y_pos * game->scale - 4, 8, 0xFFFFFFFF);
 }
\ No newline at end of file
diff --git a/src/graphics/render.c b/src/graphics/render.c
index 6ff1e79..8356c99 100644
--- a/src/graphics/render.c
+++ b/src/graphics/render.c
@@ -13,7 +13,7 @@ void    draw_hook(void *param)
     int draw_start;
     int draw_end;
 
-    memset(game->img->pixels, 0, game->img->width * game->img->height * sizeof(int32_t));
+    ft_memset(game->img->pixels, 0, game->img->width * game->img->height * sizeof(int32_t));
     i = 0;
     while (i < game->width)
     {
@@ -28,12 +28,8 @@ void    draw_hook(void *param)
         i++;
     }
     draw_map(game);
-    draw_player(game, game->map_offset_x + game->player.x_pos *game->scale - 6, game->map_offset_y + game->player.y_pos * game->scale - 6, 12, 0x000000FF);
-    draw_player(game, game->map_offset_x + game->player.x_pos *game->scale - 4, game->map_offset_y + game->player.y_pos * game->scale - 4, 8, 0xFFFFFFFF);
 }
 
-
-
 void set_player(t_game* game)
 {
     game->player.x_pos += 0.5;
@@ -52,33 +48,29 @@ void set_player(t_game* game)
 void init(t_game *game)
 {
     set_player(game);
-
     if (game->map_width > game->map_height)
         game->scale = 400 / game->map_width;
     else
         game->scale = 400 / game->map_height;
-    game->width = 1800;
+    game->width = 2040;
     game->height = 1000;
-    game->map_offset_x = 1600 - game->map_width * game->scale - game->scale;
+    game->map_offset_x = game->width - game->map_width * game->scale - game->scale;
     game->map_offset_y = game->scale;
     ft_memset(&game->keys, 0, sizeof(t_keys));
-}
-
-int render(t_game *game)
-{
-    init(game);
-
     game->mlx = mlx_init(game->width, game->height, "cub3D", 0);
     game->img = mlx_new_image(game->mlx, game->width, game->height);
     game->textures.vigne = mlx_texture_to_image(game->mlx, game->textures.vignette);
     mlx_resize_image(game->textures.vigne,  game->width , game->height);
     mlx_image_to_window(game->mlx, game->img, 0, 0);
     mlx_image_to_window(game->mlx, game->textures.vigne, 0, 0);
+}
+
+int render(t_game *game)
+{
+    init(game);
     mlx_loop_hook(game->mlx, player_hook, game);
     mlx_loop_hook(game->mlx, draw_hook, game);
-
     mlx_key_hook(game->mlx, key_hook, game);
-    
     mlx_loop(game->mlx);
     
     return 0;
diff --git a/src/main.c b/src/main.c
index ac73f55..8e4d12c 100644
--- a/src/main.c
+++ b/src/main.c
@@ -16,16 +16,9 @@ void	init_game(t_game *game)
 {
 	ft_bzero(game, sizeof(t_game));
 	game->fd = -1;
-	game->textures.north = NULL;
-    game->textures.south = NULL;
-    game->textures.west = NULL;
-    game->textures.east = NULL;
     game->ceiling_rgb = -1;
     game->floor_rgb = -1;
 }
-
-
-
 int	main(int ac, char **av)
 {
 	t_game	game;
@@ -35,7 +28,6 @@ int	main(int ac, char **av)
 	load_textures(&game);
 	render(&game);
 	free_game(&game);
-	
 	return (0);
 }
 
diff --git a/src/parsing/loading_textures.c b/src/parsing/loading_textures.c
index 4807586..e5fd5d9 100644
--- a/src/parsing/loading_textures.c
+++ b/src/parsing/loading_textures.c
@@ -38,5 +38,7 @@ void	load_textures(t_game *game)
 	if (!game->textures.east)
 		error_exit("Missing EA texture", game);
 	game->textures.tex_east = load_texture_file(game->textures.east, game);
-	game->textures.vignette = mlx_load_png("./textures/vignette2.png");
+	game->textures.vignette = mlx_load_png("./textures/hud2.png");
+	if (!game->textures.vignette)
+		error_exit("Missing hud texture", game);
 }
diff --git a/staged b/staged
new file mode 100644
index 0000000..e69de29
diff --git a/textures/hud.png b/textures/hud.png
new file mode 100644
index 0000000..a303394
Binary files /dev/null and b/textures/hud.png differ
diff --git a/textures/hud.png.png:Zone.Identifier b/textures/hud.png.png:Zone.Identifier
new file mode 100644
index 0000000..13da66a
--- /dev/null
+++ b/textures/hud.png.png:Zone.Identifier
@@ -0,0 +1,3 @@
+[ZoneTransfer]
+ZoneId=3
+HostUrl=https://www.pngwing.com/
diff --git a/textures/hud2.png b/textures/hud2.png
new file mode 100644
index 0000000..c54239a
Binary files /dev/null and b/textures/hud2.png differ
diff --git a/textures/pngwing.com.png:Zone.Identifier b/textures/pngwing.com.png:Zone.Identifier
new file mode 100644
index 0000000..13da66a
--- /dev/null
+++ b/textures/pngwing.com.png:Zone.Identifier
@@ -0,0 +1,3 @@
+[ZoneTransfer]
+ZoneId=3
+HostUrl=https://www.pngwing.com/
